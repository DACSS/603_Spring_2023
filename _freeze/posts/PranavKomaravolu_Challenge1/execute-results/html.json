{
  "hash": "82728cddc64f844da8c4070e9b0394c5",
  "result": {
    "markdown": "---\ntitle: \"Default of credit card clients dataset - UCI Machine Learning Repository\"\nauthor: \"Pranav Komaravolu\"\ndesription: \"Credit card default prediction dataset collected in Taiwan\"\ndate: \"02/19/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - Pranav Bharadwaj Komaravolu\n  - UCI_Credit_Card.csv\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n<!--## Instructions\n\nThis document provides yaml header inforamtion you will need to replicate each week to submit your homework or other blog posts. Please observe the following conventions:\n\n-   Save your own copy of this template as a blog post in the `posts` folder, naming it `FirstLast_hwX.qmd`\n-   Edit the yaml header to change your author name - use the same name each week\n-   include a *description* that is reader friendly\n-   update the *category* list to indicate the type of submission, the data used, the main packages or techniques, your name, or any thing else to make your document easy to find\n-   edit as a normal qmd/rmd file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(2,3,4,5)\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n:::\n\n-->\n## Sources\nThe dataset was obtained from the University of California Irvine (UCI) Machine Learning Repository. With the dataset labeled \"Default of credit card clients dataset\". The dataset can be accessed <a href=\"https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients\">here</a>.\n\n## Reading the dataset\nTo code to read the dataset is as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv('_data/UCI_Credit_Card.csv')\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID LIMIT_BAL SEX EDUCATION MARRIAGE AGE PAY_0 PAY_2 PAY_3 PAY_4 PAY_5 PAY_6\n1  1     20000   2         2        1  24     2     2    -1    -1    -2    -2\n2  2    120000   2         2        2  26    -1     2     0     0     0     2\n3  3     90000   2         2        2  34     0     0     0     0     0     0\n4  4     50000   2         2        1  37     0     0     0     0     0     0\n5  5     50000   1         2        1  57    -1     0    -1     0     0     0\n6  6     50000   1         1        2  37     0     0     0     0     0     0\n  BILL_AMT1 BILL_AMT2 BILL_AMT3 BILL_AMT4 BILL_AMT5 BILL_AMT6 PAY_AMT1 PAY_AMT2\n1      3913      3102       689         0         0         0        0      689\n2      2682      1725      2682      3272      3455      3261        0     1000\n3     29239     14027     13559     14331     14948     15549     1518     1500\n4     46990     48233     49291     28314     28959     29547     2000     2019\n5      8617      5670     35835     20940     19146     19131     2000    36681\n6     64400     57069     57608     19394     19619     20024     2500     1815\n  PAY_AMT3 PAY_AMT4 PAY_AMT5 PAY_AMT6 default.payment.next.month\n1        0        0        0        0                          1\n2     1000     1000        0     2000                          1\n3     1000     1000     1000     5000                          0\n4     1200     1100     1069     1000                          0\n5    10000     9000      689      679                          0\n6      657     1000     1000      800                          0\n```\n:::\n:::\n\nThe head of the table is shown above.\n\n## Dataset Description\nThe number of rows in the dataset can be obtained as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30000\n```\n:::\n:::\n\nThe number of fields or columns can be obtained as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\nThe different columns are as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"                         \"LIMIT_BAL\"                 \n [3] \"SEX\"                        \"EDUCATION\"                 \n [5] \"MARRIAGE\"                   \"AGE\"                       \n [7] \"PAY_0\"                      \"PAY_2\"                     \n [9] \"PAY_3\"                      \"PAY_4\"                     \n[11] \"PAY_5\"                      \"PAY_6\"                     \n[13] \"BILL_AMT1\"                  \"BILL_AMT2\"                 \n[15] \"BILL_AMT3\"                  \"BILL_AMT4\"                 \n[17] \"BILL_AMT5\"                  \"BILL_AMT6\"                 \n[19] \"PAY_AMT1\"                   \"PAY_AMT2\"                  \n[21] \"PAY_AMT3\"                   \"PAY_AMT4\"                  \n[23] \"PAY_AMT5\"                   \"PAY_AMT6\"                  \n[25] \"default.payment.next.month\"\n```\n:::\n:::\n\nThe data types of different columns are as follows: \n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(sapply(data, class))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           sapply(data, class)\nID                                     integer\nLIMIT_BAL                              numeric\nSEX                                    integer\nEDUCATION                              integer\nMARRIAGE                               integer\nAGE                                    integer\nPAY_0                                  integer\nPAY_2                                  integer\nPAY_3                                  integer\nPAY_4                                  integer\nPAY_5                                  integer\nPAY_6                                  integer\nBILL_AMT1                              numeric\nBILL_AMT2                              numeric\nBILL_AMT3                              numeric\nBILL_AMT4                              numeric\nBILL_AMT5                              numeric\nBILL_AMT6                              numeric\nPAY_AMT1                               numeric\nPAY_AMT2                               numeric\nPAY_AMT3                               numeric\nPAY_AMT4                               numeric\nPAY_AMT5                               numeric\nPAY_AMT6                               numeric\ndefault.payment.next.month             integer\n```\n:::\n:::\n\nThe dataset comprises of 25 different columns, 30000 rows. Each of these columns depict a particular attribute of the data here a person and the column \"default.payment.next.month\" depicts whether the person defaulted the credit payment or not. All the attributes are preprocessed so that ML algorithms can efficiently train on the data as we can observe that even some of the categorical values are converted to integer type.\n\n\n<!--## Rendering your post\n\nWhen you click the **Render** button a document will be generated that includes both content and the output of embedded code. \n\n:::{.callout-warning}\nBe sure that you have moved your `*.qmd` file into the `posts` folder **BEFORE** you render it, so that all files are stored in the correct location.\n:::\n\n:::{.callout-important}\nOnly render a single file - don't try to render the whole website!\n:::\n\n:::{.callout-note}\n## Pilot Student Blogs\n\nWe are piloting a workflow including individual student websites with direted and limited pull requests back to course blogs. Please let us know if you would like to participate.\n:::\n\n## Reading in data files\n\nThe easiest data source to use - at least initially - is to choose something easily accessible, either from our `_data` folder provided, or from an online source that is publicly available.\n\n:::{.callout-tip}\n## Using Other Data\nIf you would like to use a source that you have access to and it is small enough and you don't mind making it public, you can copy it into the `_data` file and include in your *commit* and *pull request*.\n:::\n\n:::{.callout-tip}\n## Using Private Data\n\nIf you would like to use a proprietary source of data, that should be possible using the same process outlined above. There may initially be a few issues. We hope to have this feature working smoothly soon!\n:::-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}