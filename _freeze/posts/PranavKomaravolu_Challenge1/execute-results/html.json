{
  "hash": "4d4db7585bb83d46979381de240d5e5e",
  "result": {
    "markdown": "---\ntitle: \"Default of credit card clients dataset - UCI Machine Learning Repository\"\nauthor: \"Pranav Komaravolu\"\ndesription: \"Credit card default prediction dataset collected in Taiwan\"\ndate: \"02/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - Pranav Bharadwaj Komaravolu\n  - UCI_Credit_Card.csv\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n<!--## Instructions\n\nThis document provides yaml header inforamtion you will need to replicate each week to submit your homework or other blog posts. Please observe the following conventions:\n\n-   Save your own copy of this template as a blog post in the `posts` folder, naming it `FirstLast_hwX.qmd`\n-   Edit the yaml header to change your author name - use the same name each week\n-   include a *description* that is reader friendly\n-   update the *category* list to indicate the type of submission, the data used, the main packages or techniques, your name, or any thing else to make your document easy to find\n-   edit as a normal qmd/rmd file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(2,3,4,5)\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n:::\n\n-->\n## Sources\nThe dataset was obtained from the University of California Irvine (UCI) Machine Learning Repository. With the dataset labeled \"Default of credit card clients dataset\". The dataset can be accessed <a href=\"https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients\">here</a>.\n\n## Reading the dataset\nTo code to read the dataset is as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv('_data/UCI_Credit_Card.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30000 Columns: 25\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (25): ID, LIMIT_BAL, SEX, EDUCATION, MARRIAGE, AGE, PAY_0, PAY_2, PAY_3,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 25\n     ID LIMIT_…¹   SEX EDUCA…² MARRI…³   AGE PAY_0 PAY_2 PAY_3 PAY_4 PAY_5 PAY_6\n  <dbl>    <dbl> <dbl>   <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1    20000     2       2       1    24     2     2    -1    -1    -2    -2\n2     2   120000     2       2       2    26    -1     2     0     0     0     2\n3     3    90000     2       2       2    34     0     0     0     0     0     0\n4     4    50000     2       2       1    37     0     0     0     0     0     0\n5     5    50000     1       2       1    57    -1     0    -1     0     0     0\n6     6    50000     1       1       2    37     0     0     0     0     0     0\n# … with 13 more variables: BILL_AMT1 <dbl>, BILL_AMT2 <dbl>, BILL_AMT3 <dbl>,\n#   BILL_AMT4 <dbl>, BILL_AMT5 <dbl>, BILL_AMT6 <dbl>, PAY_AMT1 <dbl>,\n#   PAY_AMT2 <dbl>, PAY_AMT3 <dbl>, PAY_AMT4 <dbl>, PAY_AMT5 <dbl>,\n#   PAY_AMT6 <dbl>, default.payment.next.month <dbl>, and abbreviated variable\n#   names ¹​LIMIT_BAL, ²​EDUCATION, ³​MARRIAGE\n```\n:::\n:::\n\nThe head of the table is shown above.\n\nThe dataset with skipped header is as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2 <- read_csv('_data/UCI_Credit_Card.csv', skip=1) # the header is skipped\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 29999 Columns: 25\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" dbl\n(25): 1...1, 20000, 2...3, 2...4, 1...5, 24, 2...7, 2...8, -1...9, -1......\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `1` -> `1...1`\n• `2` -> `2...3`\n• `2` -> `2...4`\n• `1` -> `1...5`\n• `2` -> `2...7`\n• `2` -> `2...8`\n• `-1` -> `-1...9`\n• `-1` -> `-1...10`\n• `-2` -> `-2...11`\n• `-2` -> `-2...12`\n• `689` -> `689...15`\n• `0` -> `0...16`\n• `0` -> `0...17`\n• `0` -> `0...18`\n• `0` -> `0...19`\n• `689` -> `689...20`\n• `0` -> `0...21`\n• `0` -> `0...22`\n• `0` -> `0...23`\n• `0` -> `0...24`\n• `1` -> `1...25`\n```\n:::\n\n```{.r .cell-code}\nhead(data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 25\n  `1...1` `20000` `2...3` `2...4` `1...5`  `24` `2...7` `2...8` `-1...9` -1...…¹\n    <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>    <dbl>   <dbl>\n1       2  120000       2       2       2    26      -1       2        0       0\n2       3   90000       2       2       2    34       0       0        0       0\n3       4   50000       2       2       1    37       0       0        0       0\n4       5   50000       1       2       1    57      -1       0       -1       0\n5       6   50000       1       1       2    37       0       0        0       0\n6       7  500000       1       1       2    29       0       0        0       0\n# … with 15 more variables: `-2...11` <dbl>, `-2...12` <dbl>, `3913` <dbl>,\n#   `3102` <dbl>, `689...15` <dbl>, `0...16` <dbl>, `0...17` <dbl>,\n#   `0...18` <dbl>, `0...19` <dbl>, `689...20` <dbl>, `0...21` <dbl>,\n#   `0...22` <dbl>, `0...23` <dbl>, `0...24` <dbl>, `1...25` <dbl>, and\n#   abbreviated variable name ¹​`-1...10`\n```\n:::\n:::\n\n\n\n\n## Dataset Description\nThe number of rows in the dataset can be obtained as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30000\n```\n:::\n:::\n\nThe number of fields or columns can be obtained as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\nThe different columns are as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"                         \"LIMIT_BAL\"                 \n [3] \"SEX\"                        \"EDUCATION\"                 \n [5] \"MARRIAGE\"                   \"AGE\"                       \n [7] \"PAY_0\"                      \"PAY_2\"                     \n [9] \"PAY_3\"                      \"PAY_4\"                     \n[11] \"PAY_5\"                      \"PAY_6\"                     \n[13] \"BILL_AMT1\"                  \"BILL_AMT2\"                 \n[15] \"BILL_AMT3\"                  \"BILL_AMT4\"                 \n[17] \"BILL_AMT5\"                  \"BILL_AMT6\"                 \n[19] \"PAY_AMT1\"                   \"PAY_AMT2\"                  \n[21] \"PAY_AMT3\"                   \"PAY_AMT4\"                  \n[23] \"PAY_AMT5\"                   \"PAY_AMT6\"                  \n[25] \"default.payment.next.month\"\n```\n:::\n:::\n\nThe data types of different columns are as follows: \n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(sapply(data, class))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           sapply(data, class)\nID                                     numeric\nLIMIT_BAL                              numeric\nSEX                                    numeric\nEDUCATION                              numeric\nMARRIAGE                               numeric\nAGE                                    numeric\nPAY_0                                  numeric\nPAY_2                                  numeric\nPAY_3                                  numeric\nPAY_4                                  numeric\nPAY_5                                  numeric\nPAY_6                                  numeric\nBILL_AMT1                              numeric\nBILL_AMT2                              numeric\nBILL_AMT3                              numeric\nBILL_AMT4                              numeric\nBILL_AMT5                              numeric\nBILL_AMT6                              numeric\nPAY_AMT1                               numeric\nPAY_AMT2                               numeric\nPAY_AMT3                               numeric\nPAY_AMT4                               numeric\nPAY_AMT5                               numeric\nPAY_AMT6                               numeric\ndefault.payment.next.month             numeric\n```\n:::\n:::\n\n\nSince there are some categorical attributes we can obtain the number of unique elements in each column as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\ngetUniqueValues <- function(column_label) {\n  data %>% select(all_of(column_label)) %>% n_distinct(.)\n}\nfor (i in names(data)) {\n  print(i)\n  print(getUniqueValues(i))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ID\"\n[1] 30000\n[1] \"LIMIT_BAL\"\n[1] 81\n[1] \"SEX\"\n[1] 2\n[1] \"EDUCATION\"\n[1] 7\n[1] \"MARRIAGE\"\n[1] 4\n[1] \"AGE\"\n[1] 56\n[1] \"PAY_0\"\n[1] 11\n[1] \"PAY_2\"\n[1] 11\n[1] \"PAY_3\"\n[1] 11\n[1] \"PAY_4\"\n[1] 11\n[1] \"PAY_5\"\n[1] 10\n[1] \"PAY_6\"\n[1] 10\n[1] \"BILL_AMT1\"\n[1] 22723\n[1] \"BILL_AMT2\"\n[1] 22346\n[1] \"BILL_AMT3\"\n[1] 22026\n[1] \"BILL_AMT4\"\n[1] 21548\n[1] \"BILL_AMT5\"\n[1] 21010\n[1] \"BILL_AMT6\"\n[1] 20604\n[1] \"PAY_AMT1\"\n[1] 7943\n[1] \"PAY_AMT2\"\n[1] 7899\n[1] \"PAY_AMT3\"\n[1] 7518\n[1] \"PAY_AMT4\"\n[1] 6937\n[1] \"PAY_AMT5\"\n[1] 6897\n[1] \"PAY_AMT6\"\n[1] 6939\n[1] \"default.payment.next.month\"\n[1] 2\n```\n:::\n:::\n\n\nThe dataset comprises of 25 different columns, 30000 rows. Each of these columns depict a particular attribute of the data here a person and the column \"default.payment.next.month\" depicts whether the person defaulted the credit payment or not. All the attributes are preprocessed so that ML algorithms can efficiently train on the data as we can observe that even some of the categorical values are converted to integer type. From the above cell we can observe some attributes such as \"SEX\", \"EDUCATION\", \"MARRIAGE\" and the \"default.payment.next.month\" have very less number of unique values suggesting that these attributes are categorical.\n\n## Dataset summary\nTo summarize the dataset we can use the following code:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       ID          LIMIT_BAL            SEX          EDUCATION    \n Min.   :    1   Min.   :  10000   Min.   :1.000   Min.   :0.000  \n 1st Qu.: 7501   1st Qu.:  50000   1st Qu.:1.000   1st Qu.:1.000  \n Median :15000   Median : 140000   Median :2.000   Median :2.000  \n Mean   :15000   Mean   : 167484   Mean   :1.604   Mean   :1.853  \n 3rd Qu.:22500   3rd Qu.: 240000   3rd Qu.:2.000   3rd Qu.:2.000  \n Max.   :30000   Max.   :1000000   Max.   :2.000   Max.   :6.000  \n    MARRIAGE          AGE            PAY_0             PAY_2        \n Min.   :0.000   Min.   :21.00   Min.   :-2.0000   Min.   :-2.0000  \n 1st Qu.:1.000   1st Qu.:28.00   1st Qu.:-1.0000   1st Qu.:-1.0000  \n Median :2.000   Median :34.00   Median : 0.0000   Median : 0.0000  \n Mean   :1.552   Mean   :35.49   Mean   :-0.0167   Mean   :-0.1338  \n 3rd Qu.:2.000   3rd Qu.:41.00   3rd Qu.: 0.0000   3rd Qu.: 0.0000  \n Max.   :3.000   Max.   :79.00   Max.   : 8.0000   Max.   : 8.0000  \n     PAY_3             PAY_4             PAY_5             PAY_6        \n Min.   :-2.0000   Min.   :-2.0000   Min.   :-2.0000   Min.   :-2.0000  \n 1st Qu.:-1.0000   1st Qu.:-1.0000   1st Qu.:-1.0000   1st Qu.:-1.0000  \n Median : 0.0000   Median : 0.0000   Median : 0.0000   Median : 0.0000  \n Mean   :-0.1662   Mean   :-0.2207   Mean   :-0.2662   Mean   :-0.2911  \n 3rd Qu.: 0.0000   3rd Qu.: 0.0000   3rd Qu.: 0.0000   3rd Qu.: 0.0000  \n Max.   : 8.0000   Max.   : 8.0000   Max.   : 8.0000   Max.   : 8.0000  \n   BILL_AMT1         BILL_AMT2        BILL_AMT3         BILL_AMT4      \n Min.   :-165580   Min.   :-69777   Min.   :-157264   Min.   :-170000  \n 1st Qu.:   3559   1st Qu.:  2985   1st Qu.:   2666   1st Qu.:   2327  \n Median :  22382   Median : 21200   Median :  20088   Median :  19052  \n Mean   :  51223   Mean   : 49179   Mean   :  47013   Mean   :  43263  \n 3rd Qu.:  67091   3rd Qu.: 64006   3rd Qu.:  60165   3rd Qu.:  54506  \n Max.   : 964511   Max.   :983931   Max.   :1664089   Max.   : 891586  \n   BILL_AMT5        BILL_AMT6          PAY_AMT1         PAY_AMT2      \n Min.   :-81334   Min.   :-339603   Min.   :     0   Min.   :      0  \n 1st Qu.:  1763   1st Qu.:   1256   1st Qu.:  1000   1st Qu.:    833  \n Median : 18104   Median :  17071   Median :  2100   Median :   2009  \n Mean   : 40311   Mean   :  38872   Mean   :  5664   Mean   :   5921  \n 3rd Qu.: 50190   3rd Qu.:  49198   3rd Qu.:  5006   3rd Qu.:   5000  \n Max.   :927171   Max.   : 961664   Max.   :873552   Max.   :1684259  \n    PAY_AMT3         PAY_AMT4         PAY_AMT5           PAY_AMT6       \n Min.   :     0   Min.   :     0   Min.   :     0.0   Min.   :     0.0  \n 1st Qu.:   390   1st Qu.:   296   1st Qu.:   252.5   1st Qu.:   117.8  \n Median :  1800   Median :  1500   Median :  1500.0   Median :  1500.0  \n Mean   :  5226   Mean   :  4826   Mean   :  4799.4   Mean   :  5215.5  \n 3rd Qu.:  4505   3rd Qu.:  4013   3rd Qu.:  4031.5   3rd Qu.:  4000.0  \n Max.   :896040   Max.   :621000   Max.   :426529.0   Max.   :528666.0  \n default.payment.next.month\n Min.   :0.0000            \n 1st Qu.:0.0000            \n Median :0.0000            \n Mean   :0.2212            \n 3rd Qu.:0.0000            \n Max.   :1.0000            \n```\n:::\n:::\n\n\n\n\n<!--## Rendering your post\n\nWhen you click the **Render** button a document will be generated that includes both content and the output of embedded code. \n\n:::{.callout-warning}\nBe sure that you have moved your `*.qmd` file into the `posts` folder **BEFORE** you render it, so that all files are stored in the correct location.\n:::\n\n:::{.callout-important}\nOnly render a single file - don't try to render the whole website!\n:::\n\n:::{.callout-note}\n## Pilot Student Blogs\n\nWe are piloting a workflow including individual student websites with direted and limited pull requests back to course blogs. Please let us know if you would like to participate.\n:::\n\n## Reading in data files\n\nThe easiest data source to use - at least initially - is to choose something easily accessible, either from our `_data` folder provided, or from an online source that is publicly available.\n\n:::{.callout-tip}\n## Using Other Data\nIf you would like to use a source that you have access to and it is small enough and you don't mind making it public, you can copy it into the `_data` file and include in your *commit* and *pull request*.\n:::\n\n:::{.callout-tip}\n## Using Private Data\n\nIf you would like to use a proprietary source of data, that should be possible using the same process outlined above. There may initially be a few issues. We hope to have this feature working smoothly soon!\n:::-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}