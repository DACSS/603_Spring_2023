{
  "hash": "f6e13096613adb3139beb0bf8045c757",
  "result": {
    "markdown": "---\ntitle: \"Final Project 603\"\nauthor: \"Jerin Jacob\"\ndescription: \"Final project qmd file for 603\"\ndate: \"03/10/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  \n  - finalproject\n---\n\n\nNow a days, movies are a well marketed entertainment product. Just like any other products in the market, movies are also having an allocated a marketing budget and promotional activities are done in scale. This often result in the opening weekend's gross ticketing volume to rise. But are the pre-release promotional activities helping the movie to collect more or is it just creating a hype initially? Or does the movie's gross collection is not at all dependant on pre release promotions? This dataset has 200 highest grossing movies of 2022. It has both the opening week's gross as well as the total gross collection of the movies, along with other variables. Assuming that opening week's collection is depending on the pre-release promotion, by looking on the relationship between opening week's gross and total gross, I am trying to see how the pre-release activities help the producers earn more in boxoffice.\n\n**Research Question**: To what extent does the success of a movie depend on its opening week's collection?\n\n**Hypothesis**: Opening week's collection is positively correlated with the Box Office total collection.\n\n\n\nLoading all the packages required for the project. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(stringr)\n```\n:::\n\n## Reading the data\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_excel(\"_data/project_data.xlsx\") |>\n  as.data.frame()\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Rank                                     Release      Budget     Box Office\n1    1                           Top Gun: Maverick 177 million $1.493 billion\n2    2                    Avatar: The Way of Water 460 million $2.319 billion\n3    3              Black Panther: Wakanda Forever 250 million $859.1 million\n4    4 Doctor Strange in the Multiverse of Madness 200 million $955.8 million\n5    5                    Jurassic World: Dominion 185 million $1.004 billion\n6    6                    Minions: The Rise of Gru 100 million $940.5 million\n      Gross max_th   Opening perc_tot_gr open_th  Open Close\n1 718732821   4751 126707459        17.6    4735 44708 44911\n2 636955746   4340 134100226        21.1    4202 44911    NA\n3 453474324   4396 181339761        40.0    4396 44876    NA\n4 411331607   4534 187420998        45.6    4534 44687    NA\n5 376851080   4697 145075625        38.5    4676 44722 44827\n6 369695210   4427 107010140        28.9    4391 44743    NA\n                          Distributor  int_gross world_gross\n1                  Paramount Pictures  770000000  1488732821\n2                20th Century Studios 1539273359  2176229105\n3 Walt Disney Studios Motion Pictures  389276658   842750982\n4 Walt Disney Studios Motion Pictures  544444197   955775804\n5                  Universal Pictures  625127000  1001978080\n6                  Universal Pictures  569933000   939628210\n```\n:::\n:::\n\n\n\nThere are 14 variables with 200 rows.\n\n### **COLUMN DESCRIPTION**\n\n'Rank': rank of the movie\n'Release': release date of the movie\n'Budget': The budget of the movie production\n'Box Office': The total Box Office collection\n'Gross': domestic gross of the movie\n'max_th': maximum number of theaters the movie was released in\n'Opening': gross on opening weekend\n'perc_tot_gr': domestic percentage of the total gross\n'open_th': number of theaters the movie opened in\n'Open': opening date\n'Close': closing date\n'Distributor': name of the distributor\n'int_gross': international gross\n'world_gross': worldwide gross\n\n-   'Release': release date of the movie\n\n-   'Distributor': name of the distributor\n\n-   'Small_Dist': Whether a small distributor or not\n\n-   \n\n-   'Open_date': Date of release\n\n-   'season': The season in which the movie was released\n\n-   'Opening': gross on opening weekend\n\n-   'open_th': number of theaters the movie opened in\n\n-   'max_th': maximum number of theaters the movie was released in\n\n  \n## Cleaning the Data\nFor our purpose of analysis, we need to clean and transform the data a bit. \n\nFirst, the Budget and Boxoffice columns are cleaned using stringr function so that the column values are numeric. We are getting rid of the character part in those values including '$' and the value unit. Also, there are certain values which are in Indian Rupees and South Korean won. So we need to convert thoses values to US dollars. The data for columns Budget and Box office were taken from Wikipedia. \n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |> \n  mutate(Budget = gsub(\"\\\\$\", \"\", Budget)) |>\n  mutate(Budget = sub(\".*-\", \"\", Budget)) |>\n  mutate(`Box Office` = gsub(\"\\\\$\", \"\", `Box Office`)) \n\ndf[c('Budget', 'Unit')] <- str_split_fixed(df$Budget, ' ', 2)\n\ndf$Budget <- as.numeric(df$Budget)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\ndf$Budget <- ifelse(df$Unit == \"million\", df$Budget * 1000000,\n                    ifelse(df$Unit == \"billion\", df$Budget * 1000000000,\n                           ifelse(df$Unit == \"Kmillion\", df$Budget * 1000000*0.00074,\n                                  ifelse(df$Unit == \"Kbillion\", df$Budget * 1000000000*0.00074,\n                                         ifelse(df$Unit == \"crore\", df$Budget * 10000000*80, df$Budget)))))\n\ndf[c('Box Office', 'BXUnit')] <- str_split_fixed(df$`Box Office`, ' ', 2)\n\ndf$`Box Office` <- as.numeric(df$`Box Office`)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\ndf$`Box Office` <- ifelse(df$BXUnit == \"million\", df$`Box Office` * 1000000,\n                    ifelse(df$BXUnit == \"billion\", df$`Box Office` * 1000000000,\n                           ifelse(df$BXUnit == \"Kmillion\", df$`Box Office` * 1000000*0.00074,\n                                  ifelse(df$BXUnit == \"Kbillion\", df$`Box Office` * 1000000000*0.00074,\n                                         ifelse(df$BXUnit == \"crore\", df$`Box Office` * 10000000*80, df$`Box Office`)))))\n```\n:::\n\n\nSince the original dataset from Kaggle had a column named world_gross, we can compare both variables and assume that the highest value in either of the column can be considerd as the final world_gross.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$`Box Office` <- ifelse(df$`Box Office` < df$world_gross, df$world_gross, df$`Box Office`)\n```\n:::\n\n\nWe can count the number of movies in the list for each distributor and any distributor who don't have more than 3 movies in their name can be considered as a smaller distributor and thus assuming that they won't have cash rich promotional campaigns that would lead to an audience pull to the theatre in the initial week.  \n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% group_by(Distributor) %>% mutate(Count=n_distinct(`Box Office`)) \n\ndf$Small_Dist <- ifelse(df$Count <= 3, 1, 0)\n```\n:::\n\n\nWe can convert the dbl to date format and set the reference date so that the dates are correct. After that, from the Open_date, we can categorize thsoe dates to the season so that it can be used as a confounder. Seasons might have some effect on the theatre footfall and thereby, box office collections.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Open_date <- as.Date(df$Open, origin = \"1899-12-30\")\n\n# Create a new column with the season for each date\ndf <- df %>% \n  mutate(season = case_when(\n    between(month(Open_date), 3, 5) ~ \"Spring\",\n    between(month(Open_date), 6, 8) ~ \"Summer\",\n    between(month(Open_date), 9, 11) ~ \"Fall\",\n    TRUE ~ \"Winter\"\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 20\n# Groups:   Distributor [4]\n   Rank Release    Budget `Box Office`  Gross max_th Opening perc_tot_gr open_th\n  <dbl> <chr>       <dbl>        <dbl>  <dbl>  <dbl>   <dbl>       <dbl>   <dbl>\n1     1 Top Gun: … 1.77e8   1493000000 7.19e8   4751  1.27e8        17.6    4735\n2     2 Avatar: T… 4.6 e8   2319000000 6.37e8   4340  1.34e8        21.1    4202\n3     3 Black Pan… 2.5 e8    859100000 4.53e8   4396  1.81e8        40      4396\n4     4 Doctor St… 2   e8    955800000 4.11e8   4534  1.87e8        45.6    4534\n5     5 Jurassic … 1.85e8   1004000000 3.77e8   4697  1.45e8        38.5    4676\n6     6 Minions: … 1   e8    940500000 3.70e8   4427  1.07e8        28.9    4391\n# ℹ 11 more variables: Open <dbl>, Close <dbl>, Distributor <chr>,\n#   int_gross <dbl>, world_gross <dbl>, Unit <chr>, BXUnit <chr>, Count <int>,\n#   Small_Dist <dbl>, Open_date <date>, season <chr>\n```\n:::\n:::\n\n\nChecking for NA values in each variable. There are 90 NA values in Budget variable, 38 in Box Office, 155 in Close date variable and 3 in int_gross. All othe variables seems to be good in terms of NA values.\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Rank     Release      Budget  Box Office       Gross      max_th \n          0           0          90          38           0           0 \n    Opening perc_tot_gr     open_th        Open       Close Distributor \n          0           0           0           0         155           0 \n  int_gross world_gross        Unit      BXUnit       Count  Small_Dist \n          3           0           0           0           0           0 \n  Open_date      season \n          0           0 \n```\n:::\n\n```{.r .cell-code}\ntable(df$Small_Dist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  0   1 \n140  60 \n```\n:::\n:::\n\nSince 155 values of Close are NAs, it is better not to include that variable in the analysis. Most of the NA values are for the movies by small distributors, which need to be noted.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- subset(df, select = -Close)\n\ndf <- na.omit(df)\n# Checking for NA's\ncolSums(is.na(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Rank     Release      Budget  Box Office       Gross      max_th \n          0           0           0           0           0           0 \n    Opening perc_tot_gr     open_th        Open Distributor   int_gross \n          0           0           0           0           0           0 \nworld_gross        Unit      BXUnit       Count  Small_Dist   Open_date \n          0           0           0           0           0           0 \n     season \n          0 \n```\n:::\n:::\n\n\nHave an idea about the structure of the dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngropd_df [104 × 19] (S3: grouped_df/tbl_df/tbl/data.frame)\n $ Rank       : num [1:104] 1 2 3 4 5 6 7 8 9 10 ...\n $ Release    : chr [1:104] \"Top Gun: Maverick\" \"Avatar: The Way of Water\" \"Black Panther: Wakanda Forever\" \"Doctor Strange in the Multiverse of Madness\" ...\n $ Budget     : num [1:104] 1.77e+08 4.60e+08 2.50e+08 2.00e+08 1.85e+08 1.00e+08 2.00e+08 2.50e+08 1.10e+08 2.60e+08 ...\n $ Box Office : num [1:104] 1.49e+09 2.32e+09 8.59e+08 9.56e+08 1.00e+09 ...\n $ Gross      : num [1:104] 7.19e+08 6.37e+08 4.53e+08 4.11e+08 3.77e+08 ...\n $ max_th     : num [1:104] 4751 4340 4396 4534 4697 ...\n $ Opening    : num [1:104] 1.27e+08 1.34e+08 1.81e+08 1.87e+08 1.45e+08 ...\n $ perc_tot_gr: num [1:104] 17.6 21.1 40 45.6 38.5 28.9 36.3 42 37.8 39.8 ...\n $ open_th    : num [1:104] 4735 4202 4396 4534 4676 ...\n $ Open       : num [1:104] 44708 44911 44876 44687 44722 ...\n $ Distributor: chr [1:104] \"Paramount Pictures\" \"20th Century Studios\" \"Walt Disney Studios Motion Pictures\" \"Walt Disney Studios Motion Pictures\" ...\n $ int_gross  : num [1:104] 7.70e+08 1.54e+09 3.89e+08 5.44e+08 6.25e+08 ...\n $ world_gross: num [1:104] 1.49e+09 2.18e+09 8.43e+08 9.56e+08 1.00e+09 ...\n $ Unit       : chr [1:104] \"million\" \"million\" \"million\" \"million\" ...\n $ BXUnit     : chr [1:104] \"billion\" \"billion\" \"million\" \"million\" ...\n $ Count      : int [1:104] 12 4 9 9 19 19 6 9 12 6 ...\n $ Small_Dist : num [1:104] 0 0 0 0 0 0 0 0 0 0 ...\n $ Open_date  : Date[1:104], format: \"2022-05-27\" \"2022-12-16\" ...\n $ season     : chr [1:104] \"Spring\" \"Winter\" \"Fall\" \"Spring\" ...\n - attr(*, \"groups\")= tibble [32 × 2] (S3: tbl_df/tbl/data.frame)\n  ..$ Distributor: chr [1:32] \"-\" \"20th Century Studios\" \"A24\" \"Blue Fox Entertainment\" ...\n  ..$ .rows      : list<int> [1:32] \n  .. ..$ : int [1:3] 87 94 95\n  .. ..$ : int [1:4] 2 35 38 42\n  .. ..$ : int [1:5] 26 54 60 67 102\n  .. ..$ : int 100\n  .. ..$ : int 66\n  .. ..$ : int 97\n  .. ..$ : int 62\n  .. ..$ : int 103\n  .. ..$ : int [1:3] 25 32 49\n  .. ..$ : int 76\n  .. ..$ : int [1:6] 37 41 63 74 80 86\n  .. ..$ : int 82\n  .. ..$ : int 89\n  .. ..$ : int [1:3] 85 98 104\n  .. ..$ : int [1:3] 50 51 73\n  .. ..$ : int [1:3] 77 81 83\n  .. ..$ : int 58\n  .. ..$ : int [1:10] 1 9 16 17 24 31 52 55 79 99\n  .. ..$ : int 88\n  .. ..$ : int 90\n  .. ..$ : int 84\n  .. ..$ : int [1:2] 39 64\n  .. ..$ : int [1:6] 13 18 22 34 44 48\n  .. ..$ : int 93\n  .. ..$ : int [1:2] 28 45\n  .. ..$ : int 91\n  .. ..$ : int [1:5] 30 69 70 72 78\n  .. ..$ : int [1:19] 5 6 11 14 19 23 27 29 33 43 ...\n  .. ..$ : int [1:7] 3 4 8 15 40 56 71\n  .. ..$ : int [1:6] 7 10 12 20 21 36\n  .. ..$ : int [1:2] 96 101\n  .. ..$ : int 92\n  .. ..@ ptype: int(0) \n  ..- attr(*, \".drop\")= logi TRUE\n - attr(*, \"na.action\")= 'omit' Named int [1:96] 40 42 47 54 61 63 66 69 75 77 ...\n  ..- attr(*, \"names\")= chr [1:96] \"40\" \"42\" \"47\" \"54\" ...\n```\n:::\n:::\n\n\nUsing the glimpse() function, let's have a look at how our data would look like!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 104\nColumns: 19\nGroups: Distributor [32]\n$ Rank         <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ Release      <chr> \"Top Gun: Maverick\", \"Avatar: The Way of Water\", \"Black P…\n$ Budget       <dbl> 1.77e+08, 4.60e+08, 2.50e+08, 2.00e+08, 1.85e+08, 1.00e+0…\n$ `Box Office` <dbl> 1493000000, 2319000000, 859100000, 955800000, 1004000000,…\n$ Gross        <dbl> 718732821, 636955746, 453474324, 411331607, 376851080, 36…\n$ max_th       <dbl> 4751, 4340, 4396, 4534, 4697, 4427, 4417, 4375, 4258, 440…\n$ Opening      <dbl> 126707459, 134100226, 181339761, 187420998, 145075625, 10…\n$ perc_tot_gr  <dbl> 17.6, 21.1, 40.0, 45.6, 38.5, 28.9, 36.3, 42.0, 37.8, 39.…\n$ open_th      <dbl> 4735, 4202, 4396, 4534, 4676, 4391, 4417, 4375, 4234, 440…\n$ Open         <dbl> 44708, 44911, 44876, 44687, 44722, 44743, 44624, 44750, 4…\n$ Distributor  <chr> \"Paramount Pictures\", \"20th Century Studios\", \"Walt Disne…\n$ int_gross    <dbl> 770000000, 1539273359, 389276658, 544444197, 625127000, 5…\n$ world_gross  <dbl> 1488732821, 2176229105, 842750982, 955775804, 1001978080,…\n$ Unit         <chr> \"million\", \"million\", \"million\", \"million\", \"million\", \"m…\n$ BXUnit       <chr> \"billion\", \"billion\", \"million\", \"million\", \"billion\", \"m…\n$ Count        <int> 12, 4, 9, 9, 19, 19, 6, 9, 12, 6, 19, 6, 9, 19, 9, 12, 12…\n$ Small_Dist   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Open_date    <date> 2022-05-27, 2022-12-16, 2022-11-11, 2022-05-06, 2022-06-…\n$ season       <chr> \"Spring\", \"Winter\", \"Fall\", \"Spring\", \"Summer\", \"Summer\",…\n```\n:::\n:::\n\n\n\n\n## Summary of each variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Rank          Release              Budget            Box Office       \n Min.   :  1.00   Length:104         Min.   :1.500e+05   Min.   :3.250e+05  \n 1st Qu.: 26.75   Class :character   1st Qu.:1.665e+07   1st Qu.:2.170e+07  \n Median : 56.50   Mode  :character   Median :3.550e+07   Median :6.535e+07  \n Mean   : 67.90                      Mean   :1.059e+10   Mean   :1.467e+10  \n 3rd Qu.:102.50                      3rd Qu.:9.000e+07   3rd Qu.:1.966e+08  \n Max.   :196.00                      Max.   :3.200e+11   Max.   :4.000e+11  \n     Gross               max_th        Opening           perc_tot_gr   \n Min.   :   325042   Min.   :   5   Min.   :     8416   Min.   : 0.10  \n 1st Qu.:  3755174   1st Qu.:1005   1st Qu.:   825579   1st Qu.:21.25  \n Median : 17247468   Median :3131   Median :  5128384   Median :31.85  \n Mean   : 67815629   Mean   :2584   Mean   : 20890734   Mean   :29.89  \n 3rd Qu.: 69210756   3rd Qu.:3848   3rd Qu.: 19126885   3rd Qu.:39.85  \n Max.   :718732821   Max.   :4751   Max.   :187420998   Max.   :62.90  \n    open_th            Open       Distributor          int_gross        \n Min.   :   2.0   Min.   :44568   Length:104         Min.   :6.752e+04  \n 1st Qu.: 661.5   1st Qu.:44673   Class :character   1st Qu.:2.542e+06  \n Median :3075.0   Median :44768   Mode  :character   Median :2.467e+07  \n Mean   :2400.9   Mean   :44757                      Mean   :8.879e+07  \n 3rd Qu.:3770.0   3rd Qu.:44841                      3rd Qu.:6.163e+07  \n Max.   :4735.0   Max.   :44925                      Max.   :1.539e+09  \n  world_gross            Unit              BXUnit              Count       \n Min.   :8.416e+03   Length:104         Length:104         Min.   : 1.000  \n 1st Qu.:9.576e+06   Class :character   Class :character   1st Qu.: 4.750  \n Median :4.348e+07   Mode  :character   Mode  :character   Median : 9.000  \n Mean   :1.563e+08                                         Mean   : 8.721  \n 3rd Qu.:1.445e+08                                         3rd Qu.:12.000  \n Max.   :2.176e+09                                         Max.   :19.000  \n   Small_Dist       Open_date             season         \n Min.   :0.0000   Min.   :2022-01-07   Length:104        \n 1st Qu.:0.0000   1st Qu.:2022-04-22   Class :character  \n Median :0.0000   Median :2022-07-25   Mode  :character  \n Mean   :0.2115   Mean   :2022-07-15                     \n 3rd Qu.:0.0000   3rd Qu.:2022-10-07                     \n Max.   :1.0000   Max.   :2022-12-30                     \n```\n:::\n:::\n\n\nLet's look on the distribution of data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(df$`Box Office`)\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(df$Opening)\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot histogram for \"Box Office\" variable with colors\nhist(df$`Box Office`, col = \"blue\", main = \"Box Office Distribution\", xlab = \"Box Office\")\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-13-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot histogram for \"Opening\" variable with colors\nhist(df$Opening, col = \"red\", main = \"Opening Distribution\", xlab = \"Opening\")\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-13-4.png){width=672}\n:::\n:::\n\n### Check correlation between Box Office and Opening\n\n::: {.cell}\n\n```{.r .cell-code}\ncor.test(df$Opening, df$`Box Office`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  df$Opening and df$`Box Office`\nt = -1.0944, df = 102, p-value = 0.2764\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.29421354  0.08665663\nsample estimates:\n       cor \n-0.1077295 \n```\n:::\n\n```{.r .cell-code}\ncor.test(log(df$Opening), log(df$`Box Office`))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  log(df$Opening) and log(df$`Box Office`)\nt = 4.8371, df = 102, p-value = 4.681e-06\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.2610906 0.5765810\nsample estimates:\n      cor \n0.4319587 \n```\n:::\n:::\n\n\nThe data appears to be skewed. Therefore we can try some data transformation. Log transformation would be the first option.\nLet's visualize the correlation of variables in the dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset the desired variables\npairs_df <- df[, c(\"Budget\", \"Box Office\", \"Opening\", \"open_th\", \"max_th\")]\n\n# Create a scatterplot matrix with colors\npairs(pairs_df, col = rainbow(length(pairs_df)), pch = 19)\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\nFrom the visualization, we can conclude that all the variables are correlated by open_th and max_th are moving exactly the same in the graph which means we should drop one of them to avoid the multicollinearity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot histogram for the logarithm of \"Box Office\" variable with colors\nhist(log(df$`Box Office`), col = \"blue\", main = \"Box Office Distribution (Log)\", xlab = \"Log(Box Office)\")\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot histogram for the logarithm of \"Opening\" variable with colors\nhist(log(df$Opening), col = \"red\", main = \"Opening Distribution (Log)\", xlab = \"Log(Opening)\")\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n:::\n\n\nThe log transformation made the data look like a normal distribution.\n\n## Running different models to get the best fit\nLog transformed model with only the predictor and the dependant variable\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the multiple regression model using the log-transformed data\nmodel1 <- lm(log(`Box Office`) ~ log(Opening), data = df)\n\n# Print the model summary\n#summary(model1)\n#plot(model1)\n```\n:::\n\n\n\nLog transformation for all continous variables.\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2 <- lm(log(`Box Office`) ~ log(Opening) + log(Budget) + log(open_th) + Small_Dist + season, data = df)\n#summary(model2)\n#plot(model2)\n```\n:::\n\nThe R-square has significantly improved for this model. Let us try more models.\n\nLog transformation for only Box Office, Opening and Budget. \n\n::: {.cell}\n\n```{.r .cell-code}\nmodel3 <- lm(log(`Box Office`) ~ log(Opening) + log(Budget) + open_th + Small_Dist + season, data = df)\n#summary(model3)\n#plot(model3)\n```\n:::\n\nLog transformation for only Box Office, Opening and Budget. Removing season confounder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel4 <- lm(log(`Box Office`) ~ log(Opening) + log(Budget) + open_th + Small_Dist, data = df)\n#summary(model4)\n#plot(model4)\n```\n:::\n\nR square values are further below the previous model.\nLet us try the log transformed model with only the Budget and Small_Distributor as confounders.\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel5 <- lm(log(`Box Office`) ~ log(Opening) + log(Budget) + open_th, data = df)\n#summary(model5)\n#plot(model5)\n```\n:::\n\nNow, we can run a log transformed model with only the Opening and Budget.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel6 <- lm(log(`Box Office`) ~ log(Opening) + log(Budget), data = df)\n#summary(model6)\n#plot(model6)\n```\n:::\n\nLet us run models after quadratic transformation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_quad1 <- lm(log(`Box Office`) ~ poly(Opening, 2, raw=TRUE) + log(Budget) + open_th + Small_Dist + season, data = df)\n#summary(model_quad1)\n#plot(model_quad1)\n```\n:::\n\n## Selecting a model and Interpretation of the result\n\nNow that we have multiple models, we can select the best model out of them using following criteria;\na) R-squared\nb) Adjusted R-squared\nc) PRESS\nd) AIC (Akaike Information Criterion)\ne) BIC (Bayesian Information Criterion)\n\nIn the model selection process, we can follow the rule of thumb as, for R-squared and Adjusted R-square, higher is better while for PRESS, AIC and BIC, lower is better.\n\nCreate a functions to get R-squared, Adjusted R-squared & PRESS \n\n::: {.cell}\n\n```{.r .cell-code}\nrsquared <- function(fit) summary(fit)$r.squared\nadj_rsquared <- function(fit) summary(fit)$adj.r.squared\nPRESS <- function(fit) {\n  pr <- residuals(fit)/(1-lm.influence(fit)$hat)\n  sum(pr^2)\n}\n```\n:::\n\n\nFor AIC and BIC, the functions AIC() and BIC() can be used\n\nNow, applying the functions to model objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels <- list(model1, model2, model3, model4, model5, model6, model_quad1)\nmodel_comparison <- data.frame(models = c('model1', 'model2', 'model3', 'model4', 'model5', 'model6', 'model_quad1'),\n           rSquared = sapply(models, rsquared),\n           adj_rSquared = sapply(models, adj_rsquared),\n           PRESS = sapply(models, PRESS),\n           AIC = sapply(models, AIC),\n           BIC = sapply(models, BIC)) |>\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       models  rSquared adj_rSquared    PRESS      AIC      BIC\n1      model1 0.1865883    0.1786137 637.0491 486.5987 494.5319\n2      model2 0.7330391    0.7135732 257.5371 382.7287 406.5282\n3      model3 0.7348150    0.7154786 253.7251 382.0345 405.8341\n4      model4 0.7185101    0.7071368 253.9816 382.2401 398.1064\n5      model5 0.7104267    0.7017395 253.7536 383.1845 396.4065\n6      model6 0.6883896    0.6822191 269.4781 388.8124 399.3900\n7 model_quad1 0.6951725    0.6695029 289.9369 398.5236 424.9675\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stargazer)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nPlease cite as: \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n R package version 5.2.3. https://CRAN.R-project.org/package=stargazer \n```\n:::\n\n```{.r .cell-code}\nstargazer(model1, model2, model3, model4, model5, model6, model_quad1, type = 'text')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n==================================================================================================================================================================================================\n                                                                                                      Dependent variable:                                                                         \n                              --------------------------------------------------------------------------------------------------------------------------------------------------------------------\n                                                                                                       log(`Box Office`)                                                                          \n                                        (1)                    (2)                    (3)                    (4)                     (5)                     (6)                     (7)          \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nlog(Opening)                         0.518***                0.631***               0.792***               0.790***               0.750***                 0.294***                               \n                                      (0.107)                (0.133)                (0.178)                (0.178)                 (0.178)                 (0.069)                                \n                                                                                                                                                                                                  \npoly(Opening, 2, raw = TRUE)1                                                                                                                                                      0.00000*       \n                                                                                                                                                                                  (0.00000)       \n                                                                                                                                                                                                  \npoly(Opening, 2, raw = TRUE)2                                                                                                                                                       -0.000        \n                                                                                                                                                                                   (0.000)        \n                                                                                                                                                                                                  \nlog(Budget)                                                  0.710***               0.642***               0.657***               0.665***                 0.746***                0.758***       \n                                                             (0.056)                (0.063)                (0.063)                 (0.064)                 (0.059)                 (0.060)        \n                                                                                                                                                                                                  \nlog(open_th)                                                -0.337***                                                                                                                             \n                                                             (0.121)                                                                                                                              \n                                                                                                                                                                                                  \nopen_th                                                                            -0.001***              -0.001***               -0.001***                                         0.0001        \n                                                                                    (0.0002)               (0.0002)               (0.0002)                                         (0.0001)       \n                                                                                                                                                                                                  \nSmall_Dist                                                   0.795**                 0.649*                 0.634*                                                                  0.467         \n                                                             (0.377)                (0.372)                (0.376)                                                                 (0.398)        \n                                                                                                                                                                                                  \nseasonSpring                                                 0.804**                0.880**                                                                                         0.800*        \n                                                             (0.405)                (0.404)                                                                                        (0.437)        \n                                                                                                                                                                                                  \nseasonSummer                                                  0.048                  0.005                                                                                          -0.104        \n                                                             (0.379)                (0.377)                                                                                        (0.411)        \n                                                                                                                                                                                                  \nseasonWinter                                                  0.086                  0.271                                                                                          0.072         \n                                                             (0.410)                (0.414)                                                                                        (0.443)        \n                                                                                                                                                                                                  \nConstant                             10.425***                -1.967                -3.845**               -3.907**                -3.308*                  0.606                  4.037***       \n                                      (1.640)                (1.518)                (1.915)                (1.899)                 (1.883)                 (1.278)                 (1.116)        \n                                                                                                                                                                                                  \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nObservations                            104                    104                    104                    104                     104                     104                     104          \nR2                                     0.187                  0.733                  0.735                  0.719                   0.710                   0.688                   0.695         \nAdjusted R2                            0.179                  0.714                  0.715                  0.707                   0.702                   0.682                   0.670         \nResidual Std. Error              2.463 (df = 102)        1.454 (df = 96)        1.450 (df = 96)        1.471 (df = 99)        1.484 (df = 100)         1.532 (df = 101)        1.562 (df = 95)    \nF Statistic                   23.398*** (df = 1; 102) 37.658*** (df = 7; 96) 38.002*** (df = 7; 96) 63.175*** (df = 4; 99) 81.779*** (df = 3; 100) 111.561*** (df = 2; 101) 27.081*** (df = 8; 95)\n==================================================================================================================================================================================================\nNote:                                                                                                                                                                  *p<0.1; **p<0.05; ***p<0.01\n```\n:::\n:::\n\n\nOut of all the models we ran, model3 looks as the best fit.\n\nThe linear regression model predicts the logarithm of Box Office collections based on the logarithm of Opening weekend collections, logarithm of Budget, number of theaters the movie opened in, Small_Dist (a binary variable indicating whether the distributor is small or not), and the season in which the movie was released (Spring, Summer, or Winter). \n\nThe coefficients of the independent variables show the direction and magnitude of their effect on the dependent variable. The p-value associated with each coefficient indicates whether the coefficient is statistically significant or not.\n\nThe intercept coefficient is -3.845, which means that if all independent variables are zero, the model predicts that the logarithm of Box Office collections is -3.845. However, since all the independent variables are not zero in practice, this value is not meaningful.\n\nThe coefficient of the logarithm of Opening weekend collections is 0.792, which means that a one percent increase in Opening weekend collections is associated with a 0.792 percent increase in Box Office collections.\n\nThe coefficient of the logarithm of Budget is 0.642, which means that a one percent increase in Budget is associated with a 0.642 percent increase in Box Office collections.\n\nThe coefficient of the number of theaters the movie opened in (open_th) is negative (-0.00068), which means that as the number of theaters increases by one, the predicted logarithm of Box Office collections decreases by 0.00068. This is something to be studied further, as it goes against our logic and expectation.\n\nThe coefficient of Small_Dist is 0.649, which means that the Box Office collections of movies released by small distributors are 0.649 times higher than those of movies released by large distributors, holding other variables constant. This also need more detailed study.\n\nThe coefficients associated with season indicate the difference in Box Office collections between movies released in that season and movies released in Fall (omitted reference level). For example, the coefficient of season Spring is 0.88, which means that the predicted Box Office collections of movies released in Spring are 0.88 times higher than those of movies released in Fall.\n\nThe adjusted R-squared of the model is 0.7155, which means that 71.55% of the variation in the logarithm of Box Office collections can be explained by the independent variables in the model.\n\n## Visualising the regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Set the color palette\ncolors <- c(\"red\", \"blue\", \"green\", \"orange\", \"purple\", \"pink\")\n\n# Create a blank plot with the desired layout\npar(mfrow=c(2,3))\n\n# Loop through the diagnostic plots and assign colors\nfor (i in 1:6) {\n  plot(model3, which = i, col = colors[i])\n}\n```\n\n::: {.cell-output-display}\n![](Jerin_Jacob_Final_Project_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\nThe Scale-Location plot suggests some level of heteroskedacity. So, it is better to check if there is a serious problem of heteroskedacity,we can run Breusch-Pagan test.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lmtest)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: zoo\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'zoo'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n:::\n\n```{.r .cell-code}\nbptest(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tstudentized Breusch-Pagan test\n\ndata:  model3\nBP = 16.322, df = 7, p-value = 0.02233\n```\n:::\n:::\n\nThe p-value for Breusch-Pagan test is 0.02233. This is possibly a heteroskedacity. We need to look more into this.\n\n\n\n## Conclusion:\n\nThe model that we build shows that the Box Office collection of a movie is affected positively by the Opening week collection. 1 percentage of increase in Opening week collection results in 0.792 percent increase in Box office collection after taking into account the intercept(-3.845). But the Breusch-Pagan test for heteroskedacity gives a low p-value which suggests that the model is showing heteroskedacity. \n\nThe dataset has only 200 rows out of which 96 rows were dropped as they have NA values. Also, many movies in this dataset had Box office collections much lesser than their budget. But that does not necessarily mean that those movies made a loss. In the age of online streaming platforms, many movies are making money not from Box Office only. But our study was focused only on the revenue from theatre collection. Also, in the future study, the variable transformation to address the heteroskedacity should be done. \n\n## References:\n\n1.  Nasir, Suphan & Öcal, Figen. (2016). Film Marketing: The Impact of Publicity Activities on Demand Generation. 10.4018/978-1-5225-0143-5.ch019.\n\n2.  *Elizabeth Cooper-Martin (1991) ,\"Consumers and Movies: Some Findings on Experiential Products\", in NA - Advances in Consumer Research Volume 18, eds. Rebecca H. Holman and Michael R. Solomon, Provo, UT : Association for Consumer Research, Pages: 372-378.*\n\n3. Kaggle.com (Original dataset)\n\n4. Wikipedia.com (Movie pages to get budget and box office collections)\n\n\n",
    "supporting": [
      "Jerin_Jacob_Final_Project_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}